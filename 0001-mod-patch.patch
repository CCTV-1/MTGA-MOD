From 990c2e0b0d75a3524240c5bfd72b78930864f552 Mon Sep 17 00:00:00 2001
From: CCTV-1 <script.tar.gz@gmail.com>
Date: Sat, 9 Dec 2023 10:25:21 +0800
Subject: [PATCH] mod patch.

---
 AbilityHangerBase.cs                          |  40 +++
 AccountInformation.cs                         |   2 +-
 AdvancedFiltersView.cs                        |   2 +
 AutoLandsToggle.cs                            |   6 +
 CDCPart_TextBox_DayNight.cs                   |   4 +-
 CDCPart_TextBox_Dungeon.cs                    |   5 +-
 .../MasteryEndText.cs                         |   1 +
 DeckMainTitlePanel.cs                         |   5 +
 DeckManagerController.cs                      |  10 +-
 DirectChallengeBladeWidget.cs                 |   1 +
 FriendChallengeBladeWidget.cs                 |   1 +
 GreClient.CardData/CardUtilities.cs           |  10 +-
 LibraryCardHolder.cs                          |   2 +-
 LibrarySideboardBrowserProvider.cs            |  86 ++++-
 MTGA.Loc/MTGALocalizable.cs                   |  15 +-
 MatchManager.cs                               |  31 +-
 Meta_CDC.cs                                   |  11 +
 ModManager.cs                                 | 334 ++++++++++++++++++
 SearchAndFilterBar.cs                         |   1 +
 SetCollectionScreenView.cs                    |   1 +
 SettingsPanelGraphics.cs                      |   2 +-
 SideboardInterface.cs                         |   3 +
 Spinner_OptionSelector.cs                     |   1 +
 StoreItemBase.cs                              |   1 +
 SystemMessageView.cs                          |   3 +
 .../CDCExtraFrameDetailFiller.cs              |   1 +
 .../FieldFillerUtils.cs                       |   8 +-
 .../ClassAbilityTextbox.cs                    |   5 +
 .../InteractableTextBox.cs                    |   4 +-
 .../TableAbilityTextbox.cs                    |   3 +-
 .../TextboxSubComponentBase.cs                |   9 +-
 Wotc.Mtga.Cards.Text/Utilities.cs             |  11 +-
 Wotc.Mtga.Loc/Languages.cs                    |   2 +-
 .../DraftContentController.cs                 |  29 +-
 Wotc.Mtga.Wrapper.Draft/HumanDraftPod.cs      |   1 +
 WrapperDeckBuilder.cs                         |   2 +-
 WrapperDeckUtilities.cs                       |  29 +-
 37 files changed, 606 insertions(+), 76 deletions(-)
 create mode 100644 ModManager.cs

diff --git a/AbilityHangerBase.cs b/AbilityHangerBase.cs
index d9e5db9..829f7ee 100644
--- a/AbilityHangerBase.cs
+++ b/AbilityHangerBase.cs
@@ -61,6 +61,8 @@ public class AbilityHangerBase : HangerBase
 
 	private IGreLocProvider _greLocManager;
 
+	public Dictionary<CardRarity, string> rarityNameMap;
+
 	public bool IsDirty { get; set; }
 
 	public override bool Flipped
@@ -95,6 +97,33 @@ public class AbilityHangerBase : HangerBase
 		_multiFaceHangerConfigProvider = new MultiFaceHangerConfigProvider(cardDatabase.ClientLocProvider, cardDatabase.GreLocProvider, _assetLookupSystem, _cardDatabase, currentEventFormat, genericObjectPool);
 		_faceInfoGenerator = faceInfoGenerator;
 		SpawnHangerView();
+		this.rarityNameMap = new Dictionary<CardRarity, string>
+		{
+			{
+				CardRarity.None,
+				"无"
+			},
+			{
+				CardRarity.Land,
+				"地"
+			},
+			{
+				CardRarity.Common,
+				this._locManager.GetLocalizedText("Enum/Rarity/Common", Array.Empty<ValueTuple<string, string>>())
+			},
+			{
+				CardRarity.Uncommon,
+				this._locManager.GetLocalizedText("Enum/Rarity/Uncommon", Array.Empty<ValueTuple<string, string>>())
+			},
+			{
+				CardRarity.Rare,
+				this._locManager.GetLocalizedText("Enum/Rarity/Rare", Array.Empty<ValueTuple<string, string>>())
+			},
+			{
+				CardRarity.MythicRare,
+				this._locManager.GetLocalizedText("Enum/Rarity/MythicRare", Array.Empty<ValueTuple<string, string>>())
+			}
+		};
 	}
 
 	private void SpawnHangerView()
@@ -219,6 +248,17 @@ public class AbilityHangerBase : HangerBase
 	protected virtual void AddHangersInternal(BASE_CDC cardView, ICardDataAdapter sourceModel, HangerSituation situation)
 	{
 		ICardDataAdapter model = cardView.Model;
+		if (ModManager.Instance.config.displayAbilityHangerExtraInfo)
+		{
+			string body = string.Format("系列代码：{0}\n稀有度：{1}\n内部编号：{2}{3}", new object[]
+			{
+				model.ExpansionCode,
+				this.rarityNameMap[model.Rarity],
+				model.GrpId,
+				ModManager.Instance.getCardAvgPickInfo(this._cardDatabase.CardTitleProvider.GetCardTitle(model.GrpId, true, "en-US"))
+			});
+			this._view.CreateHangerItem("Mod额外信息", false, body, false, "", false, null, 0, false, false, false);
+		}
 		if (model.IsFakeStyleCard)
 		{
 			_view.CreateHangerCardStyle();
diff --git a/AccountInformation.cs b/AccountInformation.cs
index 707aa9e..c23e917 100644
--- a/AccountInformation.cs
+++ b/AccountInformation.cs
@@ -77,7 +77,7 @@ public class AccountInformation
 
 	public bool HasRole_MythicOrange()
 	{
-		return Roles.Contains("WotC_REP", StringComparison.InvariantCultureIgnoreCase);
+		return true;
 	}
 
 	public bool HasRole_Debugging()
diff --git a/AdvancedFiltersView.cs b/AdvancedFiltersView.cs
index 99e5b44..975cb95 100644
--- a/AdvancedFiltersView.cs
+++ b/AdvancedFiltersView.cs
@@ -136,6 +136,8 @@ public class AdvancedFiltersView : MonoBehaviour
 				component.sortingLayerName = "Foreground";
 			}
 		}
+        this._formatInfo.font = ModManager.Instance.ZhCNFont;
+        this._formatLegalText.font = ModManager.Instance.
 	}
 
 	private void FormatChangeEvent(int value)
diff --git a/AutoLandsToggle.cs b/AutoLandsToggle.cs
index d52b01f..29fcdb5 100644
--- a/AutoLandsToggle.cs
+++ b/AutoLandsToggle.cs
@@ -1,5 +1,6 @@
 using System;
 using GreClient.CardData;
+using TMPro;
 using UnityEngine;
 using Wotc.Mtga.Extensions;
 
@@ -42,6 +43,11 @@ public class AutoLandsToggle : MonoBehaviour
 			deckBuilderWidget.CardRemovedFromMainDeck += _onCardRemovedFromMainDeck;
 			filterBar.LandFilterValueChanged += _onFilterValueChanged;
 			cardPoolHolder.OnPageChanged += _onPageChanged;
+			Transform transform = base.transform.FindChild("Text");
+			if (transform != null)
+			{
+				transform.GetComponent<TextMeshProUGUI>().font = ModManager.Instance.zhCNFont;
+			}
 			_isInitialized = true;
 		}
 	}
diff --git a/CDCPart_TextBox_DayNight.cs b/CDCPart_TextBox_DayNight.cs
index fe4c749..65dfb9b 100644
--- a/CDCPart_TextBox_DayNight.cs
+++ b/CDCPart_TextBox_DayNight.cs
@@ -19,8 +19,8 @@ public class CDCPart_TextBox_DayNight : CDCPart_Textbox_SuperBase
 	protected override void HandleUpdateInternal()
 	{
 		base.HandleUpdateInternal();
-		_upperTextLabel.font = _fontAsset;
-		_lowerTextLabel.font = _fontAsset;
+		_upperTextLabel.font = ModManager.Instance.zhCNFont;
+		_lowerTextLabel.font = ModManager.Instance.zhCNFont;
 		_upperTextLabel.fontSize = _supportedFontSizes[0];
 		_lowerTextLabel.fontSize = _supportedFontSizes[0];
 		UpdateLabelMaterial(_upperTextLabel);
diff --git a/CDCPart_TextBox_Dungeon.cs b/CDCPart_TextBox_Dungeon.cs
index f856c77..9b7960c 100644
--- a/CDCPart_TextBox_Dungeon.cs
+++ b/CDCPart_TextBox_Dungeon.cs
@@ -48,15 +48,14 @@ public class CDCPart_TextBox_Dungeon : CDCPart_Textbox_SuperBase
 				}
 			}
 		}
-		TMP_FontAsset titleFont = GetTitleFont();
-		TMP_FontAsset fontAsset = _fontAsset;
+		TMP_FontAsset zhCNFont = ModManager.Instance.zhCNFont;
 		for (int i = 0; i < _cachedLabelStrings.Count && i < _dungeonRooms.Count; i++)
 		{
 			(string, string) tuple = _cachedLabelStrings[i];
 			string item4 = tuple.Item1;
 			string item5 = tuple.Item2;
 			DungeonRoomTextbox dungeonRoomTextbox = _dungeonRooms[i];
-			dungeonRoomTextbox.SetFont(titleFont, fontAsset);
+			dungeonRoomTextbox.SetFont(zhCNFont, zhCNFont);
 			dungeonRoomTextbox.SetLabels(item4, item5);
 		}
 		_activeRoomArray[0] = CurrentRoomGrpId(_cachedModel);
diff --git a/Core.Meta.MainNavigation.Profile/MasteryEndText.cs b/Core.Meta.MainNavigation.Profile/MasteryEndText.cs
index 590b658..9185b34 100644
--- a/Core.Meta.MainNavigation.Profile/MasteryEndText.cs
+++ b/Core.Meta.MainNavigation.Profile/MasteryEndText.cs
@@ -22,6 +22,7 @@ namespace Core.Meta.MainNavigation.Profile
 				if (text == null)
 				{
 					text = GetComponent<TMP_Text>();
+					text.font = ModManager.Instance.zhCNFont;
 				}
 				return text;
 			}
diff --git a/DeckMainTitlePanel.cs b/DeckMainTitlePanel.cs
index f191488..fc897e6 100644
--- a/DeckMainTitlePanel.cs
+++ b/DeckMainTitlePanel.cs
@@ -210,6 +210,11 @@ public class DeckMainTitlePanel : MonoBehaviour
 			{
 				AudioManager.PlayAudio(WwiseEvents.sfx_ui_filter_toggle, AudioManager.Default);
 			});
+			_formatDropdown.transform.Find("Text_NonSelected").GetComponentInChildren<TextMeshProUGUI>().font = ModManager.Instance.zhCNFont;
+		}
+		if (_nameInput != null)
+		{
+			_nameInput.textComponent.font = ModManager.Instance.zhCNFont;
 		}
 		_meshRendererReferenceLoaders = new MeshRendererReferenceLoader[_deckBoxRenderers.Length];
 		for (int i = 0; i < _deckBoxRenderers.Length; i++)
diff --git a/DeckManagerController.cs b/DeckManagerController.cs
index f547e4b..298d1a9 100644
--- a/DeckManagerController.cs
+++ b/DeckManagerController.cs
@@ -391,9 +391,13 @@ public class DeckManagerController : NavContentController
 	{
 		if (!_decksManager.ShowDeckLimitError())
 		{
-			string createsFormat = _deckBuckets[_selectedBucket].CreatesFormat;
-			Client_Deck deck = _formatManager.GetSafeFormat(createsFormat).NewDeck(_decksManager);
-			New_GoToDeckBuilder(deck, FormatUtilities.IsAmbiguous(createsFormat));
+			string formatName = _deckBuckets[_selectedBucket].CreatesFormat;
+			if (_selectedBucket == 0)
+			{
+				formatName = ModManager.Instance.config.defaultFormatName;
+			}
+			Client_Deck deck = _formatManager.GetSafeFormat(formatName).NewDeck(_decksManager);
+			New_GoToDeckBuilder(deck, FormatUtilities.IsAmbiguous(formatName));
 		}
 	}
 
diff --git a/DirectChallengeBladeWidget.cs b/DirectChallengeBladeWidget.cs
index 95196f9..f5b0f7f 100644
--- a/DirectChallengeBladeWidget.cs
+++ b/DirectChallengeBladeWidget.cs
@@ -188,6 +188,7 @@ public class DirectChallengeBladeWidget : PlayBladeWidget
 		_selectDeckSlot.OnClick.AddListener(OnSelectDeckClicked);
 		_selectDeckButton.OnClick.AddListener(OnSelectDeckClicked);
 		LocalUsernameOutputter.onClick.AddListener(OnYourName_Clicked);
+		TournamentSettingsText.font = ModManager.Instance.zhCNFont;
 	}
 
 	private void OnEnable()
diff --git a/FriendChallengeBladeWidget.cs b/FriendChallengeBladeWidget.cs
index 36334ad..02a02f4 100644
--- a/FriendChallengeBladeWidget.cs
+++ b/FriendChallengeBladeWidget.cs
@@ -115,6 +115,7 @@ public class FriendChallengeBladeWidget : PlayBladeWidget
 			Languages.ActiveLocProvider.GetLocalizedText("MainNav/PrivateGame/Settings/StartingPlayer_Opponent")
 		});
 		_startingPlayerSpinner.SelectOption(0);
+		TournamentSettingsText.font = ModManager.Instance.zhCNFont;
 	}
 
 	private void Start()
diff --git a/GreClient.CardData/CardUtilities.cs b/GreClient.CardData/CardUtilities.cs
index ba00006..ffee4ee 100644
--- a/GreClient.CardData/CardUtilities.cs
+++ b/GreClient.CardData/CardUtilities.cs
@@ -441,15 +441,7 @@ namespace GreClient.CardData
 
 		public static bool IsCardCraftable(CardPrintingData cardPrintingData)
 		{
-			if (cardPrintingData == null)
-			{
-				return false;
-			}
-			if (cardPrintingData.IsPrimaryCard && !cardPrintingData.IsBasicLand && !NonCollectibleCardList.Contains(cardPrintingData.GrpId) && !UnreleasedSets.Contains(cardPrintingData.ExpansionCode))
-			{
-				return !NonCraftableCardList.Contains(cardPrintingData.GrpId);
-			}
-			return false;
+			return true;
 		}
 
 		public static bool IsCardCollectible(CardPrintingData cardPrintingData)
diff --git a/LibraryCardHolder.cs b/LibraryCardHolder.cs
index 3c85371..bb0125a 100644
--- a/LibraryCardHolder.cs
+++ b/LibraryCardHolder.cs
@@ -159,7 +159,7 @@ public class LibraryCardHolder : ZoneCardHolderBase, IPointerEnterHandler, IEven
 
 	public void ViewLibrary(Action<DuelScene_CDC> onCardClicked)
 	{
-		if (playerNum == GREPlayerNum.LocalPlayer && _gameManager.GetPlayerInfoForNum(GREPlayerNum.LocalPlayer).SideboardCards.Count() > 0)
+		if (playerNum == GREPlayerNum.LocalPlayer)
 		{
 			LibrarySideboardBrowserProvider librarySideboardBrowserProvider = new LibrarySideboardBrowserProvider(_gameManager, onCardClicked);
 			IBrowser openedBrowser = _gameManager.BrowserController.OpenBrowser(librarySideboardBrowserProvider);
diff --git a/LibrarySideboardBrowserProvider.cs b/LibrarySideboardBrowserProvider.cs
index 4c5eb80..10bd475 100644
--- a/LibrarySideboardBrowserProvider.cs
+++ b/LibrarySideboardBrowserProvider.cs
@@ -55,6 +55,14 @@ public class LibrarySideboardBrowserProvider : IViewDismissBrowserProvider, ICar
 			Enabled = true,
 			LocalizedString = Utils.GetLocalizedZoneKey(zone.Type, zone.Owner)
 		};
+        buttonStateData = new ButtonStateData
+        {
+            StyleType = ButtonStyle.StyleType.MultiZone,
+            BrowserElementKey = "ZoneButton2",
+            Enabled = true,
+            LocalizedString = "ZoneType_Your_MainDeck"
+        };
+        this.buttonStateData.Add(buttonStateData.BrowserElementKey, buttonStateData);
 		this.buttonStateData.Add(buttonStateData.BrowserElementKey, buttonStateData);
 		buttonStateData = new ButtonStateData
 		{
@@ -113,6 +121,7 @@ public class LibrarySideboardBrowserProvider : IViewDismissBrowserProvider, ICar
 		MtgZone zone = gameManager.LatestGameState.GetZone(ZoneType.ZoneType_Library, GREPlayerNum.LocalPlayer);
 		buttonStateData["ZoneButton0"].Enabled = false;
 		buttonStateData["ZoneButton1"].Enabled = true;
+		buttonStateData["ZoneButton2"].Enabled = true;
 		_cardsToDisplay.Clear();
 		foreach (uint cardId in zone.CardIds)
 		{
@@ -130,6 +139,7 @@ public class LibrarySideboardBrowserProvider : IViewDismissBrowserProvider, ICar
 		MtgZone zone = gameManager.LatestGameState.GetZone(ZoneType.ZoneType_Sideboard, GREPlayerNum.LocalPlayer);
 		buttonStateData["ZoneButton1"].Enabled = false;
 		buttonStateData["ZoneButton0"].Enabled = true;
+		buttonStateData["ZoneButton2"].Enabled = true;
 		_cardsToDisplay.Clear();
 		MatchManager.PlayerInfo playerInfoForNum = gameManager.GetPlayerInfoForNum(GREPlayerNum.LocalPlayer);
 		IEnumerable<uint> sideboardCards = playerInfoForNum.SideboardCards;
@@ -171,21 +181,73 @@ public class LibrarySideboardBrowserProvider : IViewDismissBrowserProvider, ICar
 		SubHeader = ((_cardsToDisplay.Count != 1) ? gameManager.LocManager.GetLocalizedText("DuelScene/Browsers/Cards_Text", ("numCards", _cardsToDisplay.Count.ToString())) : gameManager.LocManager.GetLocalizedText("DuelScene/Browsers/Card_Text", ("numCards", _cardsToDisplay.Count.ToString())));
 	}
 
+    private void SelectZoneButton2()
+    {
+        MtgZone zone = gameManager.LatestGameState.GetZone(ZoneType.ZoneType_Library, GREPlayerNum.LocalPlayer);
+        buttonStateData["ZoneButton0"].Enabled = true;
+        buttonStateData["ZoneButton1"].Enabled = true;
+        buttonStateData["ZoneButton2"].Enabled = false;
+        _cardsToDisplay.Clear();
+        MatchManager.PlayerInfo playerInfoForNum = gameManager.GetPlayerInfoForNum(GREPlayerNum.LocalPlayer);
+        IEnumerable<uint> mainDeckCards = playerInfoForNum.DeckCards;
+        List<uint> cardGrpIds = new List<uint>();
+        foreach (uint distinctGrpId in mainDeckCards.Distinct())
+        {
+            int cardCount = mainDeckCards.Count((uint x) => x == distinctGrpId);
+            for (int i = 0; i < cardCount; i++)
+            {
+                cardGrpIds.Add(distinctGrpId);
+            }
+        }
+        foreach (uint grpId in cardGrpIds)
+        {
+            string skinCode = playerInfoForNum.CardStyles.Where((CardSkinTuple x) => x.CatalogId == grpId).FirstOrDefault()?.SkinCode;
+            CardPrintingData cardPrintingById = gameManager.CardDatabase.CardDataProvider.GetCardPrintingById(grpId, skinCode);
+            MtgCardInstance mtgCardInstance = new MtgCardInstance
+            {
+                Zone = zone,
+                Controller = zone.Owner,
+                Owner = zone.Owner,
+                GrpId = grpId,
+                SkinCode = skinCode,
+                ObjectType = GameObjectType.GameObjectType_Card
+            };
+            mtgCardInstance.CopyFromPrinting(cardPrintingById);
+            CardData cardData = new CardData(mtgCardInstance, cardPrintingById);
+            DuelScene_CDC CDCObj = gameManager.ViewManager.CreateCardView(cardData);
+            _cardsToDisplay.Add(CDCObj);
+        }
+        Header = gameManager.LocManager.GetLocalizedText("ZoneType_Your_MainDeck");
+        SubHeader = ((_cardsToDisplay.Count != 1) ? gameManager.LocManager.GetLocalizedText("DuelScene/Browsers/Cards_Text", ("numCards", _cardsToDisplay.Count.ToString())) : gameManager.LocManager.GetLocalizedText("DuelScene/Browsers/Card_Text", ("numCards", _cardsToDisplay.Count.ToString())));
+    }
+
 	private void OnButtonPressed(string buttonKey)
 	{
-		switch (buttonKey)
+		switch(buttonKey)
 		{
-		case "SingleButton":
-			openedBrowser.Close();
-			break;
-		case "ZoneButton0":
-			SelectZoneButton0();
-			openedBrowser.Refresh();
-			break;
-		case "ZoneButton1":
-			SelectZoneButton1();
-			openedBrowser.Refresh();
-			break;
+			case "SingleButton":
+			{
+				this.openedBrowser.Close();
+				break;
+			}
+			case "ZoneButton0":
+			{
+				this.SelectZoneButton0();
+				this.openedBrowser.Refresh();
+				break;
+			}
+			case "ZoneButton1":
+			{
+				this.SelectZoneButton1();
+				this.openedBrowser.Refresh();
+				break;
+			}
+			case "ZoneButton2":
+			{
+				this.SelectZoneButton2();
+				this.openedBrowser.Refresh();
+				break;
+			}
 		}
 	}
 
diff --git a/MTGA.Loc/MTGALocalizable.cs b/MTGA.Loc/MTGALocalizable.cs
index 80f3eef..6d65c17 100644
--- a/MTGA.Loc/MTGALocalizable.cs
+++ b/MTGA.Loc/MTGALocalizable.cs
@@ -59,20 +59,7 @@ namespace MTGA.Loc
 				break;
 			case TargetType.Font:
 			{
-				FontMaterialMap localizedFont = fontProvider.GetLocalizedFont(locKey);
-				if (localizedFont == null)
-				{
-					break;
-				}
-				tMP_Text.font = localizedFont.font;
-				if (!string.IsNullOrEmpty(materialKey))
-				{
-					Material material = localizedFont.GetMaterial(materialKey);
-					if ((bool)material)
-					{
-						tMP_Text.fontSharedMaterial = material;
-					}
-				}
+				tMP_Text.font = ModManager.Instance.zhCNFont;
 				break;
 			}
 			default:
diff --git a/MatchManager.cs b/MatchManager.cs
index b48d509..2a20f06 100644
--- a/MatchManager.cs
+++ b/MatchManager.cs
@@ -59,11 +59,6 @@ public class MatchManager : IDisposable
 			set
 			{
 				_screenName = value;
-				int num = _screenName.LastIndexOf('#');
-				if (num != -1)
-				{
-					_screenName = _screenName.Substring(0, num);
-				}
 			}
 		}
 
@@ -102,6 +97,32 @@ public class MatchManager : IDisposable
 				_cardStyles.AddRange(cardStyles);
 			}
 		}
+
+        public void SetDeckCards(IEnumerable<CardInDeck> deckCards, IEnumerable<CardInDeck> sideboardCards)
+        {
+            this._deckCards.Clear();
+            if (deckCards != null)
+            {
+                foreach (CardInDeck card in deckCards)
+                {
+                    for (uint i = 0; i < card.Quantity; i++)
+                    {
+                        this._deckCards.Add(card.Id);
+                    }
+                }
+            }
+            this._sideboardCards.Clear();
+            if (sideboardCards != null)
+            {
+                foreach (CardInDeck card in sideboardCards)
+                {
+                    for(uint i = 0; i < card.Quantity; i++)
+                    {
+                        this._sideboardCards.Add(card.Id);
+                    }
+                }
+            }
+        }
 	}
 
 	public struct GameResult
diff --git a/Meta_CDC.cs b/Meta_CDC.cs
index ce12467..3e8d569 100644
--- a/Meta_CDC.cs
+++ b/Meta_CDC.cs
@@ -87,4 +87,15 @@ public class Meta_CDC : BASE_CDC
 		_matBlock = null;
 		base.OnDestroy();
 	}
+
+	public virtual void ShowCardRankInfo(bool active, string IWDInfo = "???")
+	{
+		_collectionAnchor.UpdateActive(active);
+		if (active)
+		{
+			_collectionCheckMark.UpdateActive(active: false);
+			_collectionText.transform.parent.gameObject.UpdateActive(active: true);
+			_collectionText.SetText(IWDInfo);
+		}
+	}
 }
diff --git a/ModManager.cs b/ModManager.cs
new file mode 100644
index 0000000..3e272af
--- /dev/null
+++ b/ModManager.cs
@@ -0,0 +1,334 @@
+using System;
+using System.Collections.Generic;
+using System.IO;
+using System.Net.Http;
+using System.Text;
+using TMPro;
+using UnityEngine;
+
+public class ModManager
+{
+	private ModManager()
+	{
+	}
+
+	public static ModManager Instance
+	{
+		get
+		{
+			lock (ModManager.lockObj)
+			{
+				if (ModManager.instance == null)
+				{
+					ModManager.instance = new ModManager();
+					if (ModManager.instance.config == null)
+					{
+						try
+						{
+							string configContent = File.ReadAllText(ModManager.configFilePath, Encoding.UTF8);
+							ModManager.instance.config = JsonUtility.FromJson<ModManager.ModConfig>(configContent);
+
+							if (ModManager.instance.config.userSkillLevel > UserSkillLevel.top)
+							{
+								ModManager.instance.config.userSkillLevel = UserSkillLevel.NONE;
+							}
+							if (ModManager.instance.config.draftDeckColor > DraftDeckColor.WUBRG)
+							{
+								ModManager.instance.config.draftDeckColor = DraftDeckColor.NONE;
+							}
+
+							if (ModManager.instance.config.userSkillLevel != UserSkillLevel.NONE)
+							{
+								ModManager.apiUri = string.Format("{0}&user_group={1}", new object[]
+								{
+									ModManager.apiUri,
+									ModManager.instance.config.userSkillLevel.ToString("G")
+								});
+							}
+							if (ModManager.instance.config.draftDeckColor != DraftDeckColor.NONE)
+							{
+								ModManager.apiUri = string.Format("{0}&colors={1}", new object[]
+								{
+									ModManager.apiUri,
+									ModManager.instance.config.draftDeckColor.ToString("G")
+								});
+							}
+						}
+						catch (Exception)
+						{
+							ModManager.instance.config = new ModManager.ModConfig();
+						}
+					}
+				}
+			}
+			return ModManager.instance;
+		}
+	}
+
+	public Dictionary<string, ModManager.DraftInfo> getCardRankMap(string setCode, string draftType)
+	{
+		if (!this.config.displayIWDText)
+		{
+			return null;
+		}
+		if (!this.cardRankMap.TryGetValue(setCode + "_" + draftType, out Dictionary<string, ModManager.DraftInfo> eventCardRankMap))
+		{
+			bool exist = false;
+			lock (ModManager.lockObj)
+			{
+				exist = this.fetchingTask.ContainsKey(setCode + "_" + draftType);
+				if (!exist)
+				{
+					this.fetchingTask[setCode + "_" + draftType] = true;
+					this.fetchCardRankInfo(setCode, draftType);
+				}
+			}
+			return null;
+		}
+		return eventCardRankMap;
+	}
+
+	public async void fetchCardRankInfo(string setCode, string draftModeName)
+	{
+		string requestUrl = string.Format(ModManager.apiUri, new object[]
+		{
+			setCode,
+			draftModeName,
+			ModManager.startDate,
+			ModManager.endDate
+		});
+
+		try
+		{
+			string responseBody = await this.client.GetStringAsync(requestUrl);
+			responseBody = string.Format("{{ \"data\": {0}}}", responseBody);
+			ModManager.CardInfoList rankList = JsonUtility.FromJson<ModManager.CardInfoList>(responseBody);
+			if (rankList != null)
+			{
+				Dictionary<string, ModManager.DraftInfo> eventCardRankMap = new Dictionary<string, ModManager.DraftInfo>();
+				foreach (ModManager.CardInfo cardInfo in rankList.data)
+				{
+					//discard untrusted data
+					if ((cardInfo.ever_drawn_game_count >= this.config.maxUntrustedIWDDataAmount) || (cardInfo.never_drawn_game_count >= this.config.maxUntrustedIWDDataAmount))
+					{
+						double iwd = (cardInfo.ever_drawn_win_rate - cardInfo.never_drawn_win_rate) * 100.0;
+						eventCardRankMap[cardInfo.name] = new ModManager.DraftInfo(iwd, cardInfo.avg_pick);
+					}
+				}
+				this.cardRankMap[setCode + "_" + draftModeName] = eventCardRankMap;
+			}
+		}
+		catch (HttpRequestException e)
+		{
+			Debug.LogWarning("fetch " + setCode + "_" + draftModeName + "card rank info failure.");
+		}
+		lock (ModManager.lockObj)
+		{
+			this.fetchingTask.Remove(setCode + "_" + draftModeName);
+		}
+	}
+
+	public string getCardAvgPickInfo(string cardName)
+	{
+		string text = "";
+		foreach (KeyValuePair<string, Dictionary<string, ModManager.DraftInfo>> keyValuePair in this.cardRankMap)
+		{
+			if (keyValuePair.Value != null && keyValuePair.Value.Count != 0)
+			{
+				ModManager.DraftInfo draftInfo;
+				keyValuePair.Value.TryGetValue(cardName, out draftInfo);
+				text = string.Concat(new string[]
+				{
+					text,
+					"\n",
+					keyValuePair.Key,
+					"平均抓位：",
+					draftInfo.avgPick.ToString()
+				});
+			}
+		}
+		return text;
+	}
+
+	public TMP_FontAsset zhCNFont
+	{
+		get
+		{
+			if (this.modFont == null)
+			{
+				string fontFileName = this.config.fontName;
+				AssetBundle assetBundle = AssetBundle.LoadFromFile(Application.dataPath + "/" + fontFileName);
+				if (assetBundle == null)
+				{
+					this.modFont = TMP_Settings.defaultFontAsset;
+					Debug.LogWarning(string.Format("{0}/{1} don't exist,use game default font:\"{2}\".", new object[]{
+						Application.dataPath,
+						fontFileName,
+						this.modFont.name
+					}));
+				}
+				else
+				{
+					this.modFont = assetBundle.LoadAsset<TMP_FontAsset>(fontFileName + " SDF");
+				}
+			}
+
+			return this.modFont;
+		}
+	}
+
+	public ModManager.ModConfig config;
+
+	private static ModManager instance = null;
+	private static readonly object lockObj = new object();
+	private static string configFilePath = Application.dataPath + "/modconfig.json";
+	private static string startDate = "2016-09-01";
+	private static string endDate = DateTime.Now.ToString("yyyy-MM-dd");
+	private static string apiUri = "https://www.17lands.com/card_ratings/data?expansion={0}&format={1}&start_date={2}&end_date={3}";
+
+	private TMP_FontAsset modFont = null;
+	// <eventName, <cardName, DraftInfo>>
+	private Dictionary<string, Dictionary<string, ModManager.DraftInfo>> cardRankMap = new Dictionary<string, Dictionary<string, ModManager.DraftInfo>>();
+	private Dictionary<string, bool> fetchingTask = new Dictionary<string, bool>();
+	private HttpClient client = new HttpClient();
+
+	public enum UserSkillLevel : uint
+	{
+		NONE = 0,
+		bottom = 1,
+		middle = 2,
+		top = 3,
+	}
+
+	public enum DraftDeckColor : uint
+	{
+		NONE = 0,
+		W,
+		U,
+		B,
+		R,
+		G,
+		WU,
+		WB,
+		WR,
+		WG,
+		UB,
+		UR,
+		UG,
+		BR,
+		BG,
+		RG,
+		WUB,
+		WUR,
+		WUG,
+		WBR,
+		WBG,
+		WRG,
+		UBR,
+		UBG,
+		URG,
+		BRG,
+		WUBR,
+		WUBG,
+		WURG,
+		WBRG,
+		UBRG,
+		WUBRG
+	}
+
+	public struct DraftInfo
+	{
+		public DraftInfo(double iwdValue, double pickValue)
+		{
+			this.iwd = iwdValue;
+			this.avgPick = pickValue;
+		}
+
+		public double iwd;
+		public double avgPick;
+	}
+
+	[Serializable]
+	public class ModConfig
+	{
+		public string fontName = "sourcehansans-medium";
+
+		public uint plainsId = 81179U;
+
+		public uint islandId = 81180U;
+
+		public uint swampId = 81181U;
+
+		public uint mountainId = 81182U;
+
+		public uint forestId = 81183U;
+
+		public uint wasteId = 62531U;
+
+		public string defaultFormatName = "Standard";
+
+		public bool displayIWDText = true;
+
+		public uint maxUntrustedIWDDataAmount = 200;
+
+		public UserSkillLevel userSkillLevel = UserSkillLevel.NONE;
+
+		public DraftDeckColor draftDeckColor = DraftDeckColor.NONE;
+
+		public bool alwayExportEnglishDeck = false;
+	}
+
+	[Serializable]
+	private class CardInfo
+	{
+		public int seen_count;
+
+		public int pick_count;
+
+		public int game_count;
+
+		public int sideboard_game_count;
+
+		public int opening_hand_game_count;
+
+		public int drawn_game_count;
+
+		public int ever_drawn_game_count;
+
+		public int never_drawn_game_count;
+
+		public string name;
+
+		public string color;
+
+		public string rarity;
+
+		public string url;
+
+		public string url_back;
+
+		public double avg_seen;
+
+		public double avg_pick;
+
+		public double win_rate;
+
+		public double sideboard_win_rate;
+
+		public double opening_hand_win_rate;
+
+		public double drawn_win_rate;
+
+		public double ever_drawn_win_rate;
+
+		public double never_drawn_win_rate;
+
+		public double drawn_improvement_win_rate;
+	}
+
+	[Serializable]
+	private class CardInfoList
+	{
+		public List<ModManager.CardInfo> data;
+	}
+}
diff --git a/SearchAndFilterBar.cs b/SearchAndFilterBar.cs
index 8ab796d..7f27d3a 100644
--- a/SearchAndFilterBar.cs
+++ b/SearchAndFilterBar.cs
@@ -103,6 +103,7 @@ public class SearchAndFilterBar : MonoBehaviour
 			AudioManager.PlayAudio(WwiseEvents.sfx_ui_generic_click, AudioManager.Default);
 			UpdateSearchText();
 		});
+		SearchInput.textComponent.font = ModManager.Instance.zhCNFont;
 		ClearSearchButton.onClick.AddListener(delegate
 		{
 			AudioManager.PlayAudio(WwiseEvents.sfx_ui_generic_click, AudioManager.Default);
diff --git a/SetCollectionScreenView.cs b/SetCollectionScreenView.cs
index 634d863..bc6689b 100644
--- a/SetCollectionScreenView.cs
+++ b/SetCollectionScreenView.cs
@@ -137,6 +137,7 @@ public class SetCollectionScreenView : MonoBehaviour
 		_biCollectionNavigateStartTime = DateTime.Now;
 		_biActiveFilter = Filters.Default.ToString();
 		_biLogger = biLogger;
+		_setReleaseDate.font = ModManager.Instance.zhCNFont;
 	}
 
 	private void MoveToStore()
diff --git a/SettingsPanelGraphics.cs b/SettingsPanelGraphics.cs
index 6427585..4d4b9f2 100644
--- a/SettingsPanelGraphics.cs
+++ b/SettingsPanelGraphics.cs
@@ -319,7 +319,7 @@ public class SettingsPanelGraphics : SettingsMenuPanel
 			"es" => "Español", 
 			"fr" => "Français", 
 			"it" => "Italiano", 
-			"ja" => "日本語", 
+			"ja" => "简体中文", 
 			"ko" => "한국어", 
 			"pt-BR" => "Português\u00a0brasileiro", 
 			"ru" => "Русский", 
diff --git a/SideboardInterface.cs b/SideboardInterface.cs
index 89133a5..03de197 100644
--- a/SideboardInterface.cs
+++ b/SideboardInterface.cs
@@ -114,6 +114,9 @@ public class SideboardInterface : MonoBehaviour
 
 	private void OnDestroy()
 	{
+        DeckInfo newDeck = this._deckBuilder.GetDeck();
+        MatchManager.PlayerInfo playerInfo = this._gameManager.GetPlayerInfoForNum(GREPlayerNum.LocalPlayer);
+        playerInfo.SetDeckCards(newDeck.mainDeck, newDeck.sideboard);
 		_deckBuilder.DoneClicked -= OnDoneClicked;
 		DisableShowHideButton();
 		DisableViewBattlefieldToggle();
diff --git a/Spinner_OptionSelector.cs b/Spinner_OptionSelector.cs
index 1318b98..2971269 100644
--- a/Spinner_OptionSelector.cs
+++ b/Spinner_OptionSelector.cs
@@ -101,6 +101,7 @@ public class Spinner_OptionSelector : MonoBehaviour
 	{
 		_buttonNextValue.OnClick.AddListener(OnNextValue);
 		_buttonPreviousValue.OnClick.AddListener(OnPreviousValue);
+		_valueLabel.font = ModManager.Instance.zhCNFont;
 	}
 
 	private void Start()
diff --git a/StoreItemBase.cs b/StoreItemBase.cs
index 6595c75..d36d7c5 100644
--- a/StoreItemBase.cs
+++ b/StoreItemBase.cs
@@ -488,6 +488,7 @@ public class StoreItemBase : MonoBehaviour
 
 	public void SetLabelText(MTGALocalizedString text)
 	{
+		_label.GameObject.GetComponent<TextMeshProUGUI>().font = ModManager.Instance.zhCNFont;
 		SetOptionalObjectText(_label, text);
 	}
 
diff --git a/SystemMessageView.cs b/SystemMessageView.cs
index 2b06b94..33c9744 100644
--- a/SystemMessageView.cs
+++ b/SystemMessageView.cs
@@ -64,6 +64,9 @@ public class SystemMessageView : MonoBehaviour, IKeyDownSubscriber, IKeySubscrib
 	{
 		_canvasGroup.blocksRaycasts = false;
 		_canvasGroup.alpha = 0f;
+		_titleText.font = ModManager.Instance.zhCNFont;
+		_messageText.font = ModManager.Instance.zhCNFont;
+		_detailsText.font = ModManager.Instance.zhCNFont;
 	}
 
 	public void Show()
diff --git a/Wotc.Mtga.CardParts.FieldFillers/CDCExtraFrameDetailFiller.cs b/Wotc.Mtga.CardParts.FieldFillers/CDCExtraFrameDetailFiller.cs
index da68f84..847a4f5 100644
--- a/Wotc.Mtga.CardParts.FieldFillers/CDCExtraFrameDetailFiller.cs
+++ b/Wotc.Mtga.CardParts.FieldFillers/CDCExtraFrameDetailFiller.cs
@@ -43,6 +43,7 @@ namespace Wotc.Mtga.CardParts.FieldFillers
 			if (!_hasBeenInit)
 			{
 				_label = GetComponent<TMP_Text>();
+				_label.font = ModManager.Instance.zhCNFont;
 				_defaultFont = _label.font;
 				_defaultFontMaterial = _label.fontSharedMaterial;
 				_hasBeenInit = true;
diff --git a/Wotc.Mtga.CardParts.FieldFillers/FieldFillerUtils.cs b/Wotc.Mtga.CardParts.FieldFillers/FieldFillerUtils.cs
index d50ecc1..cd7f4a9 100644
--- a/Wotc.Mtga.CardParts.FieldFillers/FieldFillerUtils.cs
+++ b/Wotc.Mtga.CardParts.FieldFillers/FieldFillerUtils.cs
@@ -65,12 +65,16 @@ namespace Wotc.Mtga.CardParts.FieldFillers
 					if ((object)tMP_FontAsset != null)
 					{
 						canSwapMaterial = payload.CanSwapMaterial;
-						return tMP_FontAsset;
+						if (tMP_FontAsset.name.EndsWith("Phyrexian"))
+						{
+							return tMP_FontAsset;
+						}
+						return ModManager.Instance.zhCNFont;
 					}
 				}
 			}
 			canSwapMaterial = true;
-			return null;
+			return ModManager.Instance.zhCNFont;
 		}
 
 		public static Material FindMaterial(AssetLookupSystem als, AssetTracker tracker)
diff --git a/Wotc.Mtga.Cards.Parts.Textbox/ClassAbilityTextbox.cs b/Wotc.Mtga.Cards.Parts.Textbox/ClassAbilityTextbox.cs
index 111ac43..2e3b5a2 100644
--- a/Wotc.Mtga.Cards.Parts.Textbox/ClassAbilityTextbox.cs
+++ b/Wotc.Mtga.Cards.Parts.Textbox/ClassAbilityTextbox.cs
@@ -13,6 +13,11 @@ namespace Wotc.Mtga.Cards.Parts.Textbox
 		[SerializeField]
 		private TMP_Text _costLabel;
 
+        public void Awake()
+        {
+            _costLabel.font = ModManager.Instance.ZhCNFont;
+        }
+
 		public override float GetPreferredHeight()
 		{
 			return _header.rect.height;
diff --git a/Wotc.Mtga.Cards.Parts.Textbox/InteractableTextBox.cs b/Wotc.Mtga.Cards.Parts.Textbox/InteractableTextBox.cs
index 6e5410f..79c4e49 100644
--- a/Wotc.Mtga.Cards.Parts.Textbox/InteractableTextBox.cs
+++ b/Wotc.Mtga.Cards.Parts.Textbox/InteractableTextBox.cs
@@ -42,9 +42,9 @@ namespace Wotc.Mtga.Cards.Parts.Textbox
 
 		public void SetFont(TMP_FontAsset titleFont, TMP_FontAsset abilityFont)
 		{
-			_titleLabel.font = titleFont;
+			_titleLabel.font = ModManager.Instance.ZhCNFont;
 			_titleLabel.fontStyle = FontStyles.Bold;
-			_abilityLabel.font = abilityFont;
+			_abilityLabel.font = ModManager.Instance.ZhCNFont;
 		}
 
 		public void SetLabels(string title, string ability)
diff --git a/Wotc.Mtga.Cards.Parts.Textbox/TableAbilityTextbox.cs b/Wotc.Mtga.Cards.Parts.Textbox/TableAbilityTextbox.cs
index afa904b..77aeb9c 100644
--- a/Wotc.Mtga.Cards.Parts.Textbox/TableAbilityTextbox.cs
+++ b/Wotc.Mtga.Cards.Parts.Textbox/TableAbilityTextbox.cs
@@ -21,6 +21,7 @@ namespace Wotc.Mtga.Cards.Parts.Textbox
 			{
 				Root = root;
 				Textfield = root.GetComponentInChildren<TMP_Text>();
+				Textfield.font = ModManager.Instance.zhCNFont;
 				Stripe = root.GetComponentInChildren<Image>();
 			}
 		}
@@ -100,7 +101,7 @@ namespace Wotc.Mtga.Cards.Parts.Textbox
 			{
 				if ((bool)row.Textfield)
 				{
-					row.Textfield.font = fontAsset;
+					row.Textfield.font = ModManager.Instance.zhCNFont;
 				}
 			}
 		}
diff --git a/Wotc.Mtga.Cards.Parts.Textbox/TextboxSubComponentBase.cs b/Wotc.Mtga.Cards.Parts.Textbox/TextboxSubComponentBase.cs
index 30a2da3..90dd7c4 100644
--- a/Wotc.Mtga.Cards.Parts.Textbox/TextboxSubComponentBase.cs
+++ b/Wotc.Mtga.Cards.Parts.Textbox/TextboxSubComponentBase.cs
@@ -47,7 +47,14 @@ namespace Wotc.Mtga.Cards.Parts.Textbox
 
 		public virtual void SetFont(TMP_FontAsset fontAsset)
 		{
-			_textLabel.font = fontAsset;
+			if (fontAsset.name.EndsWith("Phyrexian"))
+			{
+				_textLabel.font = fontAsset;
+			}
+			else
+			{
+				_textLabel.font = ModManager.Instance.zhCNFont;
+			}
 		}
 
 		public virtual void SetAlignment(TextAlignmentOptions textAlignment)
diff --git a/Wotc.Mtga.Cards.Text/Utilities.cs b/Wotc.Mtga.Cards.Text/Utilities.cs
index faea071..2e164a5 100644
--- a/Wotc.Mtga.Cards.Text/Utilities.cs
+++ b/Wotc.Mtga.Cards.Text/Utilities.cs
@@ -54,16 +54,7 @@ namespace Wotc.Mtga.Cards.Text
 
 		public static string GetBoldedAbilityText(string localizedText)
 		{
-			if (localizedText.Contains(". "))
-			{
-				return localizedText;
-			}
-			if (localizedText.Contains("—"))
-			{
-				string[] array = localizedText.Split('—');
-				return localizedText.Replace(array[0], $"<b>{array[0]}</b>");
-			}
-			return $"<b>{localizedText}</b>";
+			return localizedText;
 		}
 
 		public static bool TryStripLoyaltyPrefixFromString(ref string localizedText)
diff --git a/Wotc.Mtga.Loc/Languages.cs b/Wotc.Mtga.Loc/Languages.cs
index dc10203..1e46d35 100644
--- a/Wotc.Mtga.Loc/Languages.cs
+++ b/Wotc.Mtga.Loc/Languages.cs
@@ -77,7 +77,7 @@ namespace Wotc.Mtga.Loc
 			"zh-TW"
 		};
 
-		public static readonly string[] ExternalLanguages = new string[9] { "en-US", "pt-BR", "fr-FR", "it-IT", "de-DE", "es-ES", "ru-RU", "ja-JP", "ko-KR" };
+		public static readonly string[] ExternalLanguages = new string[9] { "en-US", "ja-JP" };
 
 		public static readonly string[] CardLanguages = new string[10] { "en-US", "pt-BR", "fr-FR", "it-IT", "de-DE", "es-ES", "ru-RU", "ja-JP", "ko-KR", "phyrexian" };
 
diff --git a/Wotc.Mtga.Wrapper.Draft/DraftContentController.cs b/Wotc.Mtga.Wrapper.Draft/DraftContentController.cs
index 286430e..d51f2ae 100644
--- a/Wotc.Mtga.Wrapper.Draft/DraftContentController.cs
+++ b/Wotc.Mtga.Wrapper.Draft/DraftContentController.cs
@@ -713,9 +713,10 @@ namespace Wotc.Mtga.Wrapper.Draft
 
 		private void UpdateCardCollectionInfo(bool show)
 		{
-			foreach (DraftPackCardView cardView in _draftPackHolder.GetAllCardViews())
+			_showCollectionInfo = show;
+			if (!show)
 			{
-				if (show)
+				foreach (DraftPackCardView cardView in _draftPackHolder.GetAllCardViews())
 				{
 					_inventoryManager.Cards.TryGetValue(cardView.Card.GrpId, out var value);
 					value += _deck.MainDeckIds.Count((uint id) => id == cardView.Card.GrpId);
@@ -723,12 +724,29 @@ namespace Wotc.Mtga.Wrapper.Draft
 					int maxCollected = (int)cardView.Card.Printing.MaxCollected;
 					cardView.CardView.ShowCollectionInfo(active: true, Math.Min(value, maxCollected), maxCollected);
 				}
-				else
+				return;
+			}
+			if (_draftPod.InternalEventName == null)
+			{
+				return;
+			}
+			string[] array = _draftPod.InternalEventName.Split('_');
+			Dictionary<string, ModManager.DraftInfo> cardRankMap = ModManager.Instance.getCardRankMap(array[1], array[0]);
+			if (cardRankMap == null)
+			{
+				return;
+			}
+			foreach (DraftPackCardView allCardView in _draftPackHolder.GetAllCardViews())
+			{
+				string cardTitle = _cardDatabase.CardTitleProvider.GetCardTitle(allCardView.Card.GrpId, formatted: true, "en-US");
+				string iWDInfo = "???";
+				if (cardRankMap.TryGetValue(cardTitle, out var draftInfo))
 				{
-					cardView.CardView.ShowCollectionInfo(active: false);
+					double iwd = draftInfo.iwd;
+					iWDInfo = ((!(iwd <= 0.0)) ? ("<color=\"green\"><size=90%>" + iwd.ToString("F1")) : ("<color=\"red\"><size=90%>" + iwd.ToString("F1")));
 				}
+				allCardView.CardView.ShowCardRankInfo(active: true, iWDInfo);
 			}
-			_showCollectionInfo = show;
 		}
 
 		private void UpdateWaitingOnPacksText()
@@ -909,6 +927,7 @@ namespace Wotc.Mtga.Wrapper.Draft
 		{
 			_settingCardsCoroutine = null;
 			_okToPickCard = true;
+			UpdateCardCollectionInfo(show: true);
 			StartCoroutine(Coroutine_StartTimer());
 		}
 
diff --git a/Wotc.Mtga.Wrapper.Draft/HumanDraftPod.cs b/Wotc.Mtga.Wrapper.Draft/HumanDraftPod.cs
index f09becd..37b81da 100644
--- a/Wotc.Mtga.Wrapper.Draft/HumanDraftPod.cs
+++ b/Wotc.Mtga.Wrapper.Draft/HumanDraftPod.cs
@@ -64,6 +64,7 @@ namespace Wotc.Mtga.Wrapper.Draft
 			_biLogger = biLogger;
 			eventsServiceWrapper.AddDraftNotificationCallback(OnMsg_DraftNotification);
 			_eventId = eventId;
+			InternalEventName = eventId;
 			DraftState = DraftState.Podmaking;
 			DraftId = draftId;
 		}
diff --git a/WrapperDeckBuilder.cs b/WrapperDeckBuilder.cs
index 0992176..8f63c9c 100644
--- a/WrapperDeckBuilder.cs
+++ b/WrapperDeckBuilder.cs
@@ -242,7 +242,7 @@ public class WrapperDeckBuilder : NavContentController
 	{
 		if (!_decksManager.ShowDeckLimitError())
 		{
-			DeckBuilderContext context = new DeckBuilderContext(DeckServiceWrapperHelpers.ToAzureModel(_formatManager.GetDefaultFormat().NewDeck(_decksManager)), null, sideboarding: false, firstEdit: true, DeckBuilderMode.DeckBuilding, ambiguousFormat: true);
+			DeckBuilderContext context = new DeckBuilderContext(DeckServiceWrapperHelpers.ToAzureModel(_formatManager.GetSafeFormat(ModManager.Instance.config.defaultFormatName).NewDeck(_decksManager)), null, sideboarding: false, firstEdit: true, DeckBuilderMode.DeckBuilding, ambiguousFormat: true);
 			SceneLoader.GetSceneLoader().GoToDeckBuilder(context, reloadIfAlreadyLoaded: true);
 			AudioManager.PlayAudio(WwiseEvents.sfx_ui_generic_click, base.gameObject);
 		}
diff --git a/WrapperDeckUtilities.cs b/WrapperDeckUtilities.cs
index e816ba5..d8d909f 100644
--- a/WrapperDeckUtilities.cs
+++ b/WrapperDeckUtilities.cs
@@ -352,30 +352,51 @@ public static class WrapperDeckUtilities
 
 	private static string GetMainLabel(IClientLocProvider localizationManager)
 	{
+		if (ModManager.Instance.config.alwayExportEnglishDeck)
+		{
+			return localizationManager.GetLocalizedTextForLanguage("MainNav/DeckBuilder/Deck_Label", "en-US");
+		}
 		return localizationManager.GetLocalizedText("MainNav/DeckBuilder/Deck_Label");
 	}
 
 	private static string GetSideboardLabel(IClientLocProvider localizationManager)
 	{
+		if (ModManager.Instance.config.alwayExportEnglishDeck)
+		{
+			return localizationManager.GetLocalizedTextForLanguage("MainNav/DeckBuilder/Sideboard_Label", "en-US");
+		}
 		return localizationManager.GetLocalizedText("MainNav/DeckBuilder/Sideboard_Label");
 	}
 
 	private static string GetCommanderLabel(IClientLocProvider localizationManager)
 	{
+		if (ModManager.Instance.config.alwayExportEnglishDeck)
+		{
+			return localizationManager.GetLocalizedTextForLanguage("MainNav/DeckBuilder/Commander", "en-US");
+		}
 		return localizationManager.GetLocalizedText("MainNav/DeckBuilder/Commander");
 	}
 
 	private static string GetCompanionLabel(IClientLocProvider localizationManager)
 	{
+		if (ModManager.Instance.config.alwayExportEnglishDeck)
+		{
+			return localizationManager.GetLocalizedTextForLanguage("MainNav/DeckBuilder/Companion", "en-US");
+		}
 		return localizationManager.GetLocalizedText("MainNav/DeckBuilder/Companion");
 	}
 
 	private static void ToExportString_BySection(StringBuilder builder, List<CardInDeck> cardCollection, ICardDatabaseAdapter db)
 	{
+		string overrideLanguageCode = null;
+		if (ModManager.Instance.config.alwayExportEnglishDeck)
+		{
+			overrideLanguageCode = "en-US";
+		}
 		foreach (CardInDeck item in cardCollection)
 		{
 			CardPrintingData cardPrintingById = db.CardDataProvider.GetCardPrintingById(item.Id);
-			builder.AppendLine(string.Format("{0} {1} ({2}) {3}", item.Quantity, (Languages.CurrentLanguage == "ja-JP") ? RemoveFurigana(db.GreLocProvider.GetLocalizedText(cardPrintingById.TitleId, null, formatted: false)) : db.GreLocProvider.GetLocalizedText(cardPrintingById.TitleId, null, formatted: false), cardPrintingById.ExpansionCode, cardPrintingById.CollectorNumber));
+			builder.AppendLine(string.Format("{0} {1} ({2}) {3}", item.Quantity, (Languages.CurrentLanguage == "ja-JP") ? RemoveFurigana(db.GreLocProvider.GetLocalizedText(cardPrintingById.TitleId, overrideLanguageCode, formatted: false)) : db.GreLocProvider.GetLocalizedText(cardPrintingById.TitleId, overrideLanguageCode, formatted: false), cardPrintingById.ExpansionCode, cardPrintingById.CollectorNumber));
 		}
 	}
 
@@ -624,7 +645,11 @@ public static class WrapperDeckUtilities
 
 	private static IReadOnlyList<CardPrintingData> GetPrintingsByLocalizedTitle(CardDatabase cardDatabase, string title)
 	{
-		IReadOnlyList<CardPrintingData> printingsByLocalizedTitle = cardDatabase.DatabaseUtilities.GetPrintingsByLocalizedTitle(title);
+		IReadOnlyList<CardPrintingData> printingsByLocalizedTitle = cardDatabase.DatabaseUtilities.GetPrintingsByEnglishTitle(title);
+		if (printingsByLocalizedTitle == null || printingsByLocalizedTitle.Count == 0)
+		{
+			printingsByLocalizedTitle = cardDatabase.DatabaseUtilities.GetPrintingsByLocalizedTitle(title);
+		}
 		if (printingsByLocalizedTitle != null)
 		{
 			CardPrintingData cardPrintingData = printingsByLocalizedTitle.FirstOrDefault((CardPrintingData c) => !c.IsPrimaryCard && c.DefunctRebalancedCardLink != 0 && cardDatabase.CardDataProvider.GetCardPrintingById(c.DefunctRebalancedCardLink).IsPrimaryCard);
-- 
2.43.0

